import { Injectable } from '@angular/core';
import * as _ from 'lodash';
import { FORMAT } from './file-upload.model';
export class FileUploadValidationService {
    constructor() {
        this.format = FORMAT;
    }
    /**
     * Check file size. Return true if valid
     */
    isValidFileSize(fileSize, maxFileSize) {
        return fileSize <= maxFileSize;
    }
    /**
     * Check file mime or extension. Return true if valid
     */
    isValidExtension(file, formatConfig) {
        return ((formatConfig.jpg && this.isJpgFile(file)) ||
            (formatConfig.png && this.isPngFile(file)) ||
            (formatConfig.gif && this.isGifFile(file)) ||
            (formatConfig.csv && this.isCsvFile(file)) ||
            (formatConfig.tsv && this.isTsvFile(file)) ||
            (formatConfig.zip && this.isZipFile(file)) ||
            (formatConfig.txt && this.isTxtFile(file)) ||
            (formatConfig.doc && this.isDocFile(file)) ||
            (formatConfig.xsl && this.isXslFile(file)) ||
            (formatConfig.ppt && this.isPptFile(file)) ||
            (formatConfig.rtf && this.isRtfFile(file)) ||
            (formatConfig.pdf && this.isPdfFile(file)) ||
            (formatConfig.css && this.isCssFile(file)) ||
            (formatConfig.js && this.isJsFile(file)) ||
            (formatConfig.html && this.isHtmlFile(file)) ||
            (formatConfig.code && this.isCodeFile(file)));
    }
    getAllowedMime(formatConfig) {
        const mime = [];
        for (const format in formatConfig) {
            if (this.format[format]) {
                mime.push(this.format[format].mime);
            }
        }
        return _.union(mime);
    }
    checkFileWith(mimeTypes, validExts, file) {
        const fileExt = file.name
            .split('.')
            .pop()
            .toLowerCase();
        const isValidExt = (file.type === '' || mimeTypes.length === 0) &&
            validExts.includes(fileExt);
        const isValidMime = file.type && mimeTypes.includes(file.type);
        return isValidExt || isValidMime;
    }
    isJpgFile(file) {
        return this.checkFileWith(this.format.jpg.mime, this.format.jpg.exts, file);
    }
    isPngFile(file) {
        return this.checkFileWith(this.format.png.mime, this.format.png.exts, file);
    }
    isGifFile(file) {
        return this.checkFileWith(this.format.gif.mime, this.format.gif.exts, file);
    }
    isCsvFile(file) {
        return this.checkFileWith(this.format.csv.mime, this.format.csv.exts, file);
    }
    isTsvFile(file) {
        return this.checkFileWith(this.format.tsv.mime, this.format.tsv.exts, file);
    }
    isZipFile(file) {
        return this.checkFileWith(this.format.zip.mime, this.format.zip.exts, file);
    }
    isTxtFile(file) {
        return this.checkFileWith(this.format.txt.mime, this.format.txt.exts, file);
    }
    isDocFile(file) {
        return this.checkFileWith(this.format.doc.mime, this.format.doc.exts, file);
    }
    isXslFile(file) {
        return this.checkFileWith(this.format.xsl.mime, this.format.xsl.exts, file);
    }
    isPptFile(file) {
        return this.checkFileWith(this.format.ppt.mime, this.format.ppt.exts, file);
    }
    isRtfFile(file) {
        return this.checkFileWith(this.format.rtf.mime, this.format.rtf.exts, file);
    }
    isPdfFile(file) {
        return this.checkFileWith(this.format.pdf.mime, this.format.pdf.exts, file);
    }
    isCssFile(file) {
        return this.checkFileWith(this.format.css.mime, this.format.css.exts, file);
    }
    isJsFile(file) {
        return this.checkFileWith(this.format.js.mime, this.format.js.exts, file);
    }
    isHtmlFile(file) {
        return this.checkFileWith(this.format.html.mime, this.format.html.exts, file);
    }
    isCodeFile(file) {
        return this.checkFileWith(this.format.code.mime, this.format.code.exts, file);
    }
}
FileUploadValidationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FileUploadValidationService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,