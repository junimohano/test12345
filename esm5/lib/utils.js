import * as tslib_1 from "tslib";
import * as _ from 'lodash';
export function stringContains(value, search) {
    return value.toLowerCase().indexOf(search.toLowerCase()) !== -1;
}
export function generateErrorMessage(message, httpError) {
    return httpError && httpError.error && httpError.error.message
        ? message + " (" + httpError.error.message + ")"
        : message;
}
export function onlyUnique(value, index, self) {
    return (index ===
        self.findIndex(function (selfValue) { return JSON.stringify(selfValue) === JSON.stringify(value); }));
}
export var nameOf = function (name) { return name; };
export function flatMap(items, key) {
    var _a;
    return (_a = []).concat.apply(_a, tslib_1.__spread(items.map(function (item) { return item[key]; })));
}
export function getZoneOffset() {
    var timezoneOffset = new Date().getTimezoneOffset();
    var isNegative = timezoneOffset < 0;
    var zoneOffset = (timezoneOffset * (isNegative ? -1 : 1)).toString();
    for (var i = zoneOffset.toString().length; i < 4; i++) {
        zoneOffset = '0' + zoneOffset;
    }
    return isNegative ? '-' : '+' + zoneOffset;
}
export function getEnumKeys(enumType) {
    return Object.keys(enumType).filter(function (type) { return isNaN(type) && type !== 'values'; });
}
export function isPropertyChanged(simpleChange) {
    return (simpleChange && simpleChange.previousValue !== simpleChange.currentValue);
}
export function omitDeep(collection) {
    var excludeKeys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        excludeKeys[_i - 1] = arguments[_i];
    }
    function omitFn(value) {
        if (value && typeof value === 'object') {
            excludeKeys.forEach(function (key) {
                delete value[key];
            });
        }
    }
    var clonedCollection = _.cloneDeep(collection);
    return _.cloneDeepWith(clonedCollection, omitFn);
}
export function getProgress(loaded, total) {
    return Math.round((loaded / total) * 100);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly92ZXJpdGFzLXVpLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE1BQU0sVUFBVSxjQUFjLENBQUMsS0FBYSxFQUFFLE1BQWM7SUFDMUQsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsT0FBZSxFQUFFLFNBQWM7SUFDbEUsT0FBTyxTQUFTLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU87UUFDNUQsQ0FBQyxDQUFJLE9BQU8sVUFBSyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sTUFBRztRQUMzQyxDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxJQUFXO0lBQy9ELE9BQU8sQ0FDTCxLQUFLO1FBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FDWixVQUFBLFNBQVMsSUFBSSxPQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBbkQsQ0FBbUQsQ0FDakUsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRyxVQUFJLElBQThCLElBQWEsT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDO0FBRTFFLE1BQU0sVUFBVSxPQUFPLENBQ3JCLEtBQVksRUFDWixHQUFXOztJQUVYLE9BQU8sQ0FBQSxLQUFDLEVBQVksQ0FBQSxDQUFDLE1BQU0sNEJBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBVCxDQUFTLENBQUMsR0FBRTtBQUMvRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWE7SUFDM0IsSUFBTSxjQUFjLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3RELElBQU0sVUFBVSxHQUFHLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDdEMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXJFLEtBQUssSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JELFVBQVUsR0FBRyxHQUFHLEdBQUcsVUFBVSxDQUFDO0tBQy9CO0lBRUQsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxRQUFhO0lBQ3ZDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQ2pDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSyxDQUFNLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxRQUFRLEVBQXJDLENBQXFDLENBQzlDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFlBQTBCO0lBQzFELE9BQU8sQ0FDTCxZQUFZLElBQUksWUFBWSxDQUFDLGFBQWEsS0FBSyxZQUFZLENBQUMsWUFBWSxDQUN6RSxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsVUFBZTtJQUFFLHFCQUF3QjtTQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7UUFBeEIsb0NBQXdCOztJQUNoRSxTQUFTLE1BQU0sQ0FBQyxLQUFVO1FBQ3hCLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUN0QyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztnQkFDckIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxJQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFakQsT0FBTyxDQUFDLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWMsRUFBRSxLQUFhO0lBQ3ZELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2ltcGxlQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdDb250YWlucyh2YWx1ZTogc3RyaW5nLCBzZWFyY2g6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoLnRvTG93ZXJDYXNlKCkpICE9PSAtMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlRXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgaHR0cEVycm9yOiBhbnkpOiBzdHJpbmcge1xyXG4gIHJldHVybiBodHRwRXJyb3IgJiYgaHR0cEVycm9yLmVycm9yICYmIGh0dHBFcnJvci5lcnJvci5tZXNzYWdlXHJcbiAgICA/IGAke21lc3NhZ2V9ICgke2h0dHBFcnJvci5lcnJvci5tZXNzYWdlfSlgXHJcbiAgICA6IG1lc3NhZ2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbmx5VW5pcXVlKHZhbHVlOiBhbnksIGluZGV4OiBudW1iZXIsIHNlbGY6IGFueVtdKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChcclxuICAgIGluZGV4ID09PVxyXG4gICAgc2VsZi5maW5kSW5kZXgoXHJcbiAgICAgIHNlbGZWYWx1ZSA9PiBKU09OLnN0cmluZ2lmeShzZWxmVmFsdWUpID09PSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcclxuICAgIClcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbmFtZU9mID0gPFQ+KG5hbWU6IEV4dHJhY3Q8a2V5b2YgVCwgc3RyaW5nPik6IHN0cmluZyA9PiBuYW1lO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZsYXRNYXA8VERlc3RpbmF0aW9uPihcclxuICBpdGVtczogYW55W10sXHJcbiAga2V5OiBzdHJpbmdcclxuKTogVERlc3RpbmF0aW9uW10ge1xyXG4gIHJldHVybiAoW10gYXMgYW55W10pLmNvbmNhdCguLi5pdGVtcy5tYXAoaXRlbSA9PiBpdGVtW2tleV0pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFpvbmVPZmZzZXQoKTogc3RyaW5nIHtcclxuICBjb25zdCB0aW1lem9uZU9mZnNldCA9IG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcclxuICBjb25zdCBpc05lZ2F0aXZlID0gdGltZXpvbmVPZmZzZXQgPCAwO1xyXG4gIGxldCB6b25lT2Zmc2V0ID0gKHRpbWV6b25lT2Zmc2V0ICogKGlzTmVnYXRpdmUgPyAtMSA6IDEpKS50b1N0cmluZygpO1xyXG5cclxuICBmb3IgKGxldCBpID0gem9uZU9mZnNldC50b1N0cmluZygpLmxlbmd0aDsgaSA8IDQ7IGkrKykge1xyXG4gICAgem9uZU9mZnNldCA9ICcwJyArIHpvbmVPZmZzZXQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXNOZWdhdGl2ZSA/ICctJyA6ICcrJyArIHpvbmVPZmZzZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnVtS2V5cyhlbnVtVHlwZTogYW55KTogc3RyaW5nW10ge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhlbnVtVHlwZSkuZmlsdGVyKFxyXG4gICAgdHlwZSA9PiBpc05hTig8YW55PnR5cGUpICYmIHR5cGUgIT09ICd2YWx1ZXMnXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcGVydHlDaGFuZ2VkKHNpbXBsZUNoYW5nZTogU2ltcGxlQ2hhbmdlKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChcclxuICAgIHNpbXBsZUNoYW5nZSAmJiBzaW1wbGVDaGFuZ2UucHJldmlvdXNWYWx1ZSAhPT0gc2ltcGxlQ2hhbmdlLmN1cnJlbnRWYWx1ZVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbWl0RGVlcChjb2xsZWN0aW9uOiBhbnksIC4uLmV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSk6IGFueSB7XHJcbiAgZnVuY3Rpb24gb21pdEZuKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGV4Y2x1ZGVLZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBkZWxldGUgdmFsdWVba2V5XTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjbG9uZWRDb2xsZWN0aW9uID0gXy5jbG9uZURlZXAoY29sbGVjdGlvbik7XHJcblxyXG4gIHJldHVybiBfLmNsb25lRGVlcFdpdGgoY2xvbmVkQ29sbGVjdGlvbiwgb21pdEZuKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb2dyZXNzKGxvYWRlZDogbnVtYmVyLCB0b3RhbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICByZXR1cm4gTWF0aC5yb3VuZCgobG9hZGVkIC8gdG90YWwpICogMTAwKTtcclxufVxyXG4iXX0=