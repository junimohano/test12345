{"version":3,"file":"veritas-library.js.map","sources":["ng://veritas-library/lib/utils.ts","ng://veritas-library/lib/components/initial-indicator/initial-indicator.component.ts","ng://veritas-library/lib/components/initial-indicator/initial-indicator.module.ts","ng://veritas-library/lib/constants/page.constant.ts","ng://veritas-library/lib/constants/veritas-api.constant.ts","ng://veritas-library/lib/enums/comment-entity-type.enum.ts","ng://veritas-library/lib/enums/task-status.enum.ts","ng://veritas-library/lib/enums/respondent-type.enum.ts","ng://veritas-library/lib/enums/question-type.enum.ts","ng://veritas-library/lib/enums/question-single-select-ui-type.enum.ts","ng://veritas-library/lib/enums/question-multi-select-ui-type.enum.ts","ng://veritas-library/lib/enums/questionnaire-view-mode.enum.ts","ng://veritas-library/lib/models/comment-base.model.ts","ng://veritas-library/lib/models/comment.model.ts","ng://veritas-library/lib/models/comment-reply.model.ts","ng://veritas-library/lib/models/assignee.model.ts","ng://veritas-library/lib/models/attachment.model.ts","ng://veritas-library/lib/services/aaa-user/aaa-user.service.ts","ng://veritas-library/lib/services/dash-board-comment-controller/dash-board-comment-controller.service.ts","ng://veritas-library/lib/services/dash-board-survey-controller/dash-board-survey-controller.service.ts","ng://veritas-library/lib/services/questionnaire-utils/questionnaire-utils.service.ts","ng://veritas-library/lib/custom-encoder.ts","ng://veritas-library/lib/services/user-controller/user-controller.service.ts","ng://veritas-library/lib/change-detectable-component-base.ts","ng://veritas-library/public_api.ts","ng://veritas-library/veritas-library.ts"],"sourcesContent":["import { SimpleChange } from '@angular/core';\r\nimport * as _ from 'lodash';\r\n\r\nexport function stringContains(value: string, search: string): boolean {\r\n  return value.toLowerCase().indexOf(search.toLowerCase()) !== -1;\r\n}\r\n\r\nexport function generateErrorMessage(message: string, httpError: any): string {\r\n  return httpError && httpError.error && httpError.error.message\r\n    ? `${message} (${httpError.error.message})`\r\n    : message;\r\n}\r\n\r\nexport function onlyUnique(value: any, index: number, self: any[]): boolean {\r\n  return (\r\n    index ===\r\n    self.findIndex(\r\n      selfValue => JSON.stringify(selfValue) === JSON.stringify(value)\r\n    )\r\n  );\r\n}\r\n\r\nexport const nameOf = <T>(name: Extract<keyof T, string>): string => name;\r\n\r\nexport function flatMap<TDestination>(\r\n  items: any[],\r\n  key: string\r\n): TDestination[] {\r\n  return ([] as any[]).concat(...items.map(item => item[key]));\r\n}\r\n\r\nexport function getZoneOffset(): string {\r\n  const timezoneOffset = new Date().getTimezoneOffset();\r\n  const isNegative = timezoneOffset < 0;\r\n  let zoneOffset = (timezoneOffset * (isNegative ? -1 : 1)).toString();\r\n\r\n  for (let i = zoneOffset.toString().length; i < 4; i++) {\r\n    zoneOffset = '0' + zoneOffset;\r\n  }\r\n\r\n  return isNegative ? '-' : '+' + zoneOffset;\r\n}\r\n\r\nexport function getEnumKeys(enumType: any): string[] {\r\n  return Object.keys(enumType).filter(\r\n    type => isNaN(<any>type) && type !== 'values'\r\n  );\r\n}\r\n\r\nexport function isPropertyChanged(simpleChange: SimpleChange): boolean {\r\n  return (\r\n    simpleChange && simpleChange.previousValue !== simpleChange.currentValue\r\n  );\r\n}\r\n\r\nexport function omitDeep(collection: any, ...excludeKeys: string[]): any {\r\n  function omitFn(value: any): void {\r\n    if (value && typeof value === 'object') {\r\n      excludeKeys.forEach(key => {\r\n        delete value[key];\r\n      });\r\n    }\r\n  }\r\n\r\n  const clonedCollection = _.cloneDeep(collection);\r\n\r\n  return _.cloneDeepWith(clonedCollection, omitFn);\r\n}\r\n\r\nexport function getProgress(loaded: number, total: number): number {\r\n  return Math.round((loaded / total) * 100);\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { isPropertyChanged } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'ta-initial-indicator',\r\n  templateUrl: './initial-indicator.component.html',\r\n  styleUrls: ['./initial-indicator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InitialIndicatorComponent implements OnInit, OnChanges {\r\n  @Input() public name: string;\r\n\r\n  public initial: string;\r\n\r\n  private readonly splitKey = ' ';\r\n\r\n  constructor() {}\r\n\r\n  public ngOnInit(): void {}\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (isPropertyChanged(changes.name)) {\r\n      this.setInitial();\r\n    }\r\n  }\r\n\r\n  private setInitial(): void {\r\n    const nameSplits = this.name.split(this.splitKey);\r\n    this.initial =\r\n      nameSplits.length > 1 ? this.getInitial(nameSplits) : this.name;\r\n  }\r\n\r\n  private getInitial(nameSplits: string[]): string {\r\n    return `${this.getWordByIndex(nameSplits, 0)}${this.getWordByIndex(\r\n      nameSplits,\r\n      1\r\n    )}`;\r\n  }\r\n\r\n  private getWordByIndex(nameSplits: string[], index: number) {\r\n    return nameSplits[index][0].toLocaleUpperCase();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InitialIndicatorComponent } from './initial-indicator.component';\r\n\r\n@NgModule({\r\n  declarations: [InitialIndicatorComponent],\r\n  imports: [CommonModule],\r\n  exports: [InitialIndicatorComponent]\r\n})\r\nexport class InitialIndicatorModule {}\r\n","export const PAGE_OFFSET_FOR_SERVER = -1;\r\nexport const SEARCH_DEBOUNCE_TIME = 300;\r\n","export const VERITAS_API_PROXY_PREFIX_URL = 'VERITAS_API_PROXY_PREFIX_URL';\r\n","export enum CommentEntityTypeEnum {\r\n  Question = 'QUESTION',\r\n  Task = 'TASK'\r\n}\r\n","export enum TaskStatusEnum {\r\n  Open = 'OPEN',\r\n  InProgress = 'IN_PROGRESS',\r\n  InReview = 'IN_REVIEW',\r\n  Closed = 'CLOSED',\r\n  ActionRequired = 'ACTION_REQUIRED'\r\n}\r\n\r\nexport namespace TaskStatusEnum {\r\n  export function getDisplayText(value: TaskStatusEnum): string {\r\n    let result = '';\r\n    switch (value) {\r\n      case TaskStatusEnum.Open:\r\n        result = 'Open';\r\n        break;\r\n\r\n      case TaskStatusEnum.InProgress:\r\n        result = 'In Progress';\r\n        break;\r\n\r\n      case TaskStatusEnum.InReview:\r\n        result = 'In Review';\r\n        break;\r\n\r\n      case TaskStatusEnum.Closed:\r\n        result = 'Closed';\r\n        break;\r\n\r\n      case TaskStatusEnum.ActionRequired:\r\n        result = 'Action Required';\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","export enum RespondentTypeEnum {\r\n  Reviewer = 'REVIEWER',\r\n  RemediationTaskReviewer = 'REMEDIATION_TASK_REVIEWER',\r\n  PrivacyTeam = 'PRIVACY_TEAM',\r\n  BusinessOwner = 'BUSINESS_OWNER',\r\n  VendorContact = 'VENDOR_CONTACT',\r\n  HumanResourcesTeam = 'HUMAN_RESOURCES_TEAM',\r\n  ItSecurityTeam = 'IT_SECURITY_TEAM',\r\n  Other = 'OTHER'\r\n}\r\n\r\nexport namespace RespondentTypeEnum {\r\n  export function getDisplayText(value: RespondentTypeEnum): string {\r\n    let result = '';\r\n    switch (value) {\r\n      case RespondentTypeEnum.Reviewer:\r\n        result = 'Reviewer';\r\n        break;\r\n\r\n      case RespondentTypeEnum.RemediationTaskReviewer:\r\n        result = 'Remediation Task Reviewer';\r\n        break;\r\n\r\n      case RespondentTypeEnum.PrivacyTeam:\r\n        result = 'Privacy Team';\r\n        break;\r\n\r\n      case RespondentTypeEnum.BusinessOwner:\r\n        result = 'Business Owner';\r\n        break;\r\n\r\n      case RespondentTypeEnum.VendorContact:\r\n        result = 'Vendor Contact';\r\n        break;\r\n\r\n      case RespondentTypeEnum.HumanResourcesTeam:\r\n        result = 'Human Resources Team';\r\n        break;\r\n\r\n      case RespondentTypeEnum.ItSecurityTeam:\r\n        result = 'IT/Security Team';\r\n        break;\r\n\r\n      case RespondentTypeEnum.Other:\r\n        result = 'Other';\r\n        break;\r\n\r\n      default:\r\n        result = value;\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","export enum QuestionTypeEnum {\r\n  SingleSelect = 'SINGLE_SELECT',\r\n  MultiSelect = 'MULTI_SELECT',\r\n  Text = 'TEXT'\r\n}\r\n","export enum QuestionSingleSelectUiTypeEnum {\r\n  Horizontal = 'HORIZONTAL',\r\n  Vertical = 'VERTICAL',\r\n  Slider = 'SLIDER'\r\n}\r\n","export enum QuestionMultiSelectUiTypeEnum {\r\n  Horizontal = 'HORIZONTAL',\r\n  Vertical = 'VERTICAL'\r\n}\r\n","export enum QuestionnaireViewModeEnum {\r\n  All = 'all',\r\n  Answered = 'answered',\r\n  Unanswered = 'unanswered'\r\n}\r\n","import { Attachment } from './attachment.model';\r\n\r\nexport abstract class CommentBase {\r\n  id: string;\r\n  appName: string;\r\n  attachments: Attachment;\r\n  created: Date;\r\n  createdByFullName: string;\r\n  createdById: string;\r\n  entityId: string;\r\n  entityTitle: string;\r\n  entityType: string;\r\n  mentionedUsers: {\r\n    email: string;\r\n    firstName: string;\r\n    lastName: string;\r\n  }[];\r\n  messageText: string;\r\n  modifier: string;\r\n  sequenceNumber: number;\r\n  status: string;\r\n  version: number;\r\n}\r\n","import { CommentBase } from './comment-base.model';\r\nimport { CommentReply } from './comment-reply.model';\r\n\r\nexport class Comment extends CommentBase {\r\n  commentMessageReplies: CommentReply[];\r\n  isEditing: boolean;\r\n}\r\n","import { CommentBase } from './comment-base.model';\r\n\r\nexport class CommentReply extends CommentBase {\r\n  commentMessage: CommentBase;\r\n}\r\n","export class Assignee {\r\n  accountId: string;\r\n  userId: string;\r\n  externalUserName: string;\r\n  externalUserEmail: string;\r\n}\r\n","export class Attachment {\r\n  id: string;\r\n  created: Date;\r\n  region: string;\r\n  bucketName: string;\r\n  objectKey: string;\r\n  originalFileName: string;\r\n  version: string;\r\n  lastUpdated: Date;\r\n  createdBy: string;\r\n  lastUpdatedBy: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AaaUserService {\r\n  private fullName = '';\r\n\r\n  constructor() {}\r\n\r\n  public set setFullName(fullName: string) {\r\n    this.fullName = fullName;\r\n  }\r\n\r\n  public get getFullName() {\r\n    return this.fullName;\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { PAGE_OFFSET_FOR_SERVER } from '../../constants/page.constant';\r\nimport { VERITAS_API_PROXY_PREFIX_URL } from '../../constants/veritas-api.constant';\r\nimport { CommentEntityTypeEnum } from '../../enums/comment-entity-type.enum';\r\nimport { PageInterface } from '../../interfaces/page.interface';\r\nimport { AnswerDetailResponseInterface } from '../../interfaces/questionnaire.interface';\r\nimport { Comment } from '../../models/comment.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashBoardCommentControllerService {\r\n  private readonly url = `${this.veritasApiProxyPrefixUrl}/comment`;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    @Inject(VERITAS_API_PROXY_PREFIX_URL)\r\n    private veritasApiProxyPrefixUrl: string\r\n  ) {}\r\n\r\n  public getComments$(\r\n    entityId: string,\r\n    page: number = 1,\r\n    maxRows: number = 20\r\n  ): Observable<PageInterface<Comment>> {\r\n    const params = new HttpParams()\r\n      .append('page', (page + PAGE_OFFSET_FOR_SERVER).toString())\r\n      .append('size', maxRows.toString());\r\n\r\n    return this.httpClient\r\n      .get<PageInterface<Comment>>(`${this.url}/${entityId}`, {\r\n        params\r\n      })\r\n      .pipe(\r\n        map(response => {\r\n          response.content.forEach((comment: Comment) => {\r\n            comment.isEditing = false;\r\n          });\r\n          return response;\r\n        })\r\n      );\r\n  }\r\n\r\n  public createComment$(\r\n    entityId: string,\r\n    entityType: CommentEntityTypeEnum,\r\n    message: string\r\n  ): Observable<Comment> {\r\n    const data = {\r\n      entityId,\r\n      entityType,\r\n      messageText: message\r\n    };\r\n\r\n    return this.httpClient.post<Comment>(`${this.url}/${entityId}`, data);\r\n  }\r\n\r\n  public updateComment$(\r\n    entityId: string,\r\n    entityType: CommentEntityTypeEnum,\r\n    commentId: string,\r\n    message: string\r\n  ): Observable<Comment> {\r\n    const data = {\r\n      entityId,\r\n      entityType,\r\n      messageText: message,\r\n      id: commentId\r\n    };\r\n\r\n    return this.httpClient.post<Comment>(\r\n      `${this.url}/${entityId}/${commentId}`,\r\n      data\r\n    );\r\n  }\r\n\r\n  public deleteComment$(\r\n    entityId: string,\r\n    commentId: string\r\n  ): Observable<Comment> {\r\n    return this.httpClient.delete<Comment>(\r\n      `${this.url}/${entityId}/${commentId}`\r\n    );\r\n  }\r\n\r\n  public getQuestionContainerViewPages(taskId: string): Observable<any> {\r\n    return this.httpClient\r\n      .get(`/api/question-survey/${taskId}`)\r\n      .pipe(map(this.mapGetQuestionContainerViewPages));\r\n  }\r\n\r\n  public getAttachmentDownloadUrl$(attachmentId: string): Observable<any> {\r\n    return this.httpClient.get(`${this.url}/attachments/${attachmentId}/url`);\r\n  }\r\n\r\n  private mapGetQuestionContainerViewPages(questionnaire) {\r\n    return questionnaire;\r\n  }\r\n\r\n  public postQuestionDetailResponses(\r\n    answers: AnswerDetailResponseInterface[],\r\n    submitAction: boolean,\r\n    taskId: string\r\n  ): Observable<any> {\r\n    // Assemble post data\r\n    const answersData = {\r\n      answers: answers,\r\n      submitAction: submitAction\r\n    };\r\n    return this.httpClient.post(`/api/question-survey/${taskId}`, answersData);\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { VERITAS_API_PROXY_PREFIX_URL } from '../../constants/veritas-api.constant';\r\nimport {\r\n  AnswerDetailResponseInterface,\r\n  QuestionnaireInterface\r\n} from '../../interfaces/questionnaire.interface';\r\nimport { Attachment } from '../../models/attachment.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashBoardSurveyControllerService {\r\n  private readonly url = `${this.veritasApiProxyPrefixUrl}/question-survey`;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    @Inject(VERITAS_API_PROXY_PREFIX_URL)\r\n    private veritasApiProxyPrefixUrl: string\r\n  ) {}\r\n\r\n  /**\r\n   * GET List Tasks Data\r\n   */\r\n  public getQuestionContainerViewPages(\r\n    recordId: string\r\n  ): Observable<QuestionnaireInterface> {\r\n    return this.httpClient\r\n      .get(`${this.url}/${recordId}`)\r\n      .pipe(map(this.mapGetQuestionContainerViewPages));\r\n  }\r\n\r\n  public postAttachments$(\r\n    recordId: string,\r\n    questionNodeId: string,\r\n    files: File[]\r\n  ): Observable<HttpEvent<Attachment[]>> {\r\n    const formData = new FormData();\r\n    files.forEach(file => formData.append('attachmentFiles', file));\r\n\r\n    return this.httpClient.post<any>(\r\n      `${this.url}/${recordId}/question/${questionNodeId}/attachments`,\r\n      formData,\r\n      {\r\n        reportProgress: true,\r\n        observe: 'events'\r\n      }\r\n    );\r\n  }\r\n\r\n  public deleteAttachment$(\r\n    recordId: string,\r\n    questionNodeId: string,\r\n    attachmentId: string\r\n  ): Observable<Attachment[]> {\r\n    return this.httpClient.delete<Attachment[]>(\r\n      `${\r\n        this.url\r\n      }/${recordId}/question/${questionNodeId}/attachments/${attachmentId}`\r\n    );\r\n  }\r\n\r\n  private mapGetQuestionContainerViewPages(questionnaire) {\r\n    return questionnaire;\r\n  }\r\n\r\n  public postQuestionDetailResponses(\r\n    answers: AnswerDetailResponseInterface[],\r\n    submitAction: boolean,\r\n    recordId: string\r\n  ): Observable<any> {\r\n    // Assemble post data\r\n    const answersData = {\r\n      answers: answers,\r\n      submitAction: submitAction\r\n    };\r\n    return this.httpClient.post(\r\n      `/api/question-survey/${recordId}`,\r\n      answersData\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { QuestionTypeEnum } from '../../enums/question-type.enum';\r\nimport { QuestionnaireViewModeEnum } from '../../enums/questionnaire-view-mode.enum';\r\nimport {\r\n  ConditionDetailConditionInterface,\r\n  ConditionTreeInterface,\r\n  QuestionDetailResponseInterface,\r\n  QuestionDetailsInterface\r\n} from '../../interfaces/questionnaire.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionnaireUtilsService {\r\n  private reviewMode = false;\r\n  private viewMode = QuestionnaireViewModeEnum.All;\r\n  private _viewModeSubject$ = new Subject<any>();\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Toggles whether to display the questionnaire in review mode.\r\n   */\r\n  public getReviewMode() {\r\n    return this.reviewMode;\r\n  }\r\n\r\n  public setReviewMode(reviewMode: boolean) {\r\n    this.reviewMode = reviewMode;\r\n  }\r\n\r\n  /**\r\n   * Communicate whether to show all, unanswered, or answered questions\r\n   */\r\n  public getViewMode() {\r\n    return this.viewMode;\r\n  }\r\n\r\n  public changeViewMode(viewMode: QuestionnaireViewModeEnum) {\r\n    this.viewMode = viewMode;\r\n    this._viewModeSubject$.next(this.viewMode);\r\n  }\r\n\r\n  public getViewModeObservable(): Observable<string> {\r\n    return this._viewModeSubject$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Return the question's current anwer. Can be a response object or a string.\r\n   * @param question to check\r\n   */\r\n  public getQuestionAnswer(questionDetails: QuestionDetailsInterface): any {\r\n    switch (questionDetails.questionDetailType) {\r\n      case QuestionTypeEnum.SingleSelect:\r\n        // Loop through responses and if previously selected option was found, patch value\r\n        const questionDetailResponses = questionDetails.questionDetailResponses;\r\n        if (questionDetailResponses) {\r\n          const selectedResponse = questionDetailResponses.find(response => {\r\n            return response.questionDetailResponsesSelected;\r\n          });\r\n\r\n          if (selectedResponse) {\r\n            return selectedResponse;\r\n          }\r\n        }\r\n        break;\r\n      case QuestionTypeEnum.Text:\r\n        const textResponse = questionDetails.questionDetailAnswerText;\r\n        if (textResponse) {\r\n          return textResponse;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Used by parent question with a conditionTree to see if it should display it\r\n   * @param conditionTree conditionTree\r\n   */\r\n  public getConditionFulfilled(\r\n    conditionTree: ConditionTreeInterface,\r\n    questionDetails: QuestionDetailsInterface\r\n  ): boolean {\r\n    // Depending on question type, get the appropriate answer object/string\r\n    // Currently only supports single select\r\n    const selectedResponse: QuestionDetailResponseInterface = questionDetails.questionDetailResponses.find(\r\n      response => {\r\n        return response.questionDetailResponsesSelected;\r\n      }\r\n    );\r\n\r\n    if (\r\n      conditionTree.conditionDetails &&\r\n      conditionTree.conditionDetails.conditionDetailConditions\r\n    ) {\r\n      const conditionDetailConditions: ConditionDetailConditionInterface[] =\r\n        conditionTree.conditionDetails.conditionDetailConditions;\r\n\r\n      // Loop through all conditions and make sure they are all fulfilled\r\n      for (let i = 0; i < conditionDetailConditions.length; i++) {\r\n        const conditionDetailCondition = conditionDetailConditions[i];\r\n        if (!this.checkCondition(conditionDetailCondition, selectedResponse)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check that given condition is fulfilled by parent question\r\n   * @param conditionDetailCondition conditionDetailCondition\r\n   */\r\n  private checkCondition(\r\n    conditionDetailCondition: ConditionDetailConditionInterface,\r\n    currentResponse: any\r\n  ): boolean {\r\n    // Currently only supports single select\r\n    if (currentResponse && conditionDetailCondition.expressionViewValueId) {\r\n      const answer: QuestionDetailResponseInterface = currentResponse;\r\n      const questionResponseId = answer.questionDetailResponsesId;\r\n      const conditionValueId = conditionDetailCondition.expressionViewValueId;\r\n\r\n      if (questionResponseId === conditionValueId) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n\r\nexport class CustomEncoder implements HttpParameterCodec {\r\n  public encodeKey(key: string): string {\r\n    return encodeURIComponent(key);\r\n  }\r\n\r\n  public encodeValue(value: string): string {\r\n    return encodeURIComponent(value);\r\n  }\r\n\r\n  public decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  public decodeValue(value: string): string {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { VERITAS_API_PROXY_PREFIX_URL } from '../../constants/veritas-api.constant';\r\nimport { CustomEncoder } from '../../custom-encoder';\r\nimport { PageInterface } from '../../interfaces/page.interface';\r\nimport { Assignee } from '../../models/assignee.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserControllerService {\r\n  private readonly url = `${this.veritasApiProxyPrefixUrl}/users`;\r\n  private readonly maxRows = 10;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    @Inject(VERITAS_API_PROXY_PREFIX_URL)\r\n    private veritasApiProxyPrefixUrl: string\r\n  ) {}\r\n\r\n  public getUsers$(\r\n    page: number,\r\n    search: string = null\r\n  ): Observable<PageInterface<Assignee>> {\r\n    let params = new HttpParams({ encoder: new CustomEncoder() })\r\n      .append('page', page.toString())\r\n      .append('size', this.maxRows.toString());\r\n\r\n    if (search) {\r\n      params = params.append('search', search);\r\n    }\r\n\r\n    return this.httpClient.get<PageInterface<Assignee>>(this.url, {\r\n      params\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef } from '@angular/core';\r\n\r\nexport abstract class ChangeDetectableComponentBase\r\n  implements ChangeDetectorRef {\r\n  private get isChangeDetectorDestroyed(): boolean {\r\n    return this.changeDetectorRef['destroyed'];\r\n  }\r\n\r\n  constructor(protected changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  markForCheck(): void {\r\n    if (this.isChangeDetectorDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  detach(): void {\r\n    if (this.isChangeDetectorDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.changeDetectorRef.detach();\r\n  }\r\n\r\n  detectChanges(): void {\r\n    if (this.isChangeDetectorDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  checkNoChanges(): void {\r\n    if (this.isChangeDetectorDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.changeDetectorRef.checkNoChanges();\r\n  }\r\n\r\n  reattach(): void {\r\n    if (this.isChangeDetectorDestroyed) {\r\n      return;\r\n    }\r\n\r\n    this.changeDetectorRef.reattach();\r\n  }\r\n}\r\n","// export * from './lib/components/comments-popover/index';\r\n// export * from './lib/components/delete-modal/index';\r\n// export * from './lib/components/file-upload/index';\r\nexport * from './lib/components/initial-indicator/index';\r\n// export * from './lib/components/question/index';\r\n// export * from './lib/components/question-accordion/index';\r\n// export * from './lib/components/task-status-tag/index';\r\n// export * from './lib/components/questionnaire-content/index';\r\n// export * from './lib/components/questionnaire-content-modal/index';\r\nexport * from './lib/constants/index';\r\nexport * from './lib/enums/index';\r\nexport * from './lib/interfaces/index';\r\nexport * from './lib/models/index';\r\nexport * from './lib/services/index';\r\nexport * from './lib/change-detectable-component-base';\r\nexport * from './lib/custom-encoder';\r\nexport * from './lib/utils';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["_.cloneDeep","_.cloneDeepWith","tslib_1.__extends"],"mappings":"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"}
