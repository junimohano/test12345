{"version":3,"sources":["ng://veritas-library/lib/components/initial-indicator/initial-indicator.component.ts","ng://veritas-library/lib/utils.ts","ng://veritas-library/lib/components/initial-indicator/initial-indicator.module.ts","ng://veritas-library/lib/constants/page.constant.ts","ng://veritas-library/lib/constants/veritas-api.constant.ts"],"names":["InitialIndicatorComponent","this","splitKey","prototype","ngOnInit","ngOnChanges","changes","isPropertyChanged","simpleChange","previousValue","currentValue","name","setInitial","nameSplits","split","initial","length","getInitial","getWordByIndex","index","toLocaleUpperCase","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","InitialIndicatorModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"yXAwBE,SAAAA,IAFiBC,KAAAC,SAAW,IA4B9B,OAxBSF,EAAAG,UAAAC,SAAP,aAEOJ,EAAAG,UAAAE,YAAP,SAAmBC,aCqBLC,EAAkBC,GAChC,OACEA,GAAgBA,EAAaC,gBAAkBD,EAAaE,cDtBxDH,CAAkBD,EAAQK,OAC5BV,KAAKW,cAIDZ,EAAAG,UAAAS,WAAR,WACE,IAAMC,EAAaZ,KAAKU,KAAKG,MAAMb,KAAKC,UACxCD,KAAKc,QACiB,EAApBF,EAAWG,OAAaf,KAAKgB,WAAWJ,GAAcZ,KAAKU,MAGvDX,EAAAG,UAAAc,WAAR,SAAmBJ,GACjB,MAAO,GAAGZ,KAAKiB,eAAeL,EAAY,GAAKZ,KAAKiB,eAClDL,EACA,IAIIb,EAAAG,UAAAe,eAAR,SAAuBL,EAAsBM,GAC3C,OAAON,EAAWM,GAAO,GAAGC,yCArC/BC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,uBACVC,SAAA,mHAEAC,gBAAiBC,EAAAA,wBAAwBC,6rBAGxCC,EAAAA,SAgCH5B,kBE7CA,SAAA6B,KAKqC,2BALpCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAAC/B,GACfgC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAClC,OAEyB6B,wFCVE,yBACH,mCCDQ","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { isPropertyChanged } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'ta-initial-indicator',\r\n  templateUrl: './initial-indicator.component.html',\r\n  styleUrls: ['./initial-indicator.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InitialIndicatorComponent implements OnInit, OnChanges {\r\n  @Input() public name: string;\r\n\r\n  public initial: string;\r\n\r\n  private readonly splitKey = ' ';\r\n\r\n  constructor() {}\r\n\r\n  public ngOnInit(): void {}\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (isPropertyChanged(changes.name)) {\r\n      this.setInitial();\r\n    }\r\n  }\r\n\r\n  private setInitial(): void {\r\n    const nameSplits = this.name.split(this.splitKey);\r\n    this.initial =\r\n      nameSplits.length > 1 ? this.getInitial(nameSplits) : this.name;\r\n  }\r\n\r\n  private getInitial(nameSplits: string[]): string {\r\n    return `${this.getWordByIndex(nameSplits, 0)}${this.getWordByIndex(\r\n      nameSplits,\r\n      1\r\n    )}`;\r\n  }\r\n\r\n  private getWordByIndex(nameSplits: string[], index: number) {\r\n    return nameSplits[index][0].toLocaleUpperCase();\r\n  }\r\n}\r\n","import { SimpleChange } from '@angular/core';\r\nimport * as _ from 'lodash';\r\n\r\nexport function stringContains(value: string, search: string): boolean {\r\n  return value.toLowerCase().indexOf(search.toLowerCase()) !== -1;\r\n}\r\n\r\nexport function generateErrorMessage(message: string, httpError: any): string {\r\n  return httpError && httpError.error && httpError.error.message\r\n    ? `${message} (${httpError.error.message})`\r\n    : message;\r\n}\r\n\r\nexport function onlyUnique(value: any, index: number, self: any[]): boolean {\r\n  return (\r\n    index ===\r\n    self.findIndex(\r\n      selfValue => JSON.stringify(selfValue) === JSON.stringify(value)\r\n    )\r\n  );\r\n}\r\n\r\nexport const nameOf = <T>(name: Extract<keyof T, string>): string => name;\r\n\r\nexport function flatMap<TDestination>(\r\n  items: any[],\r\n  key: string\r\n): TDestination[] {\r\n  return ([] as any[]).concat(...items.map(item => item[key]));\r\n}\r\n\r\nexport function getZoneOffset(): string {\r\n  const timezoneOffset = new Date().getTimezoneOffset();\r\n  const isNegative = timezoneOffset < 0;\r\n  let zoneOffset = (timezoneOffset * (isNegative ? -1 : 1)).toString();\r\n\r\n  for (let i = zoneOffset.toString().length; i < 4; i++) {\r\n    zoneOffset = '0' + zoneOffset;\r\n  }\r\n\r\n  return isNegative ? '-' : '+' + zoneOffset;\r\n}\r\n\r\nexport function getEnumKeys(enumType: any): string[] {\r\n  return Object.keys(enumType).filter(\r\n    type => isNaN(<any>type) && type !== 'values'\r\n  );\r\n}\r\n\r\nexport function isPropertyChanged(simpleChange: SimpleChange): boolean {\r\n  return (\r\n    simpleChange && simpleChange.previousValue !== simpleChange.currentValue\r\n  );\r\n}\r\n\r\nexport function omitDeep(collection: any, ...excludeKeys: string[]): any {\r\n  function omitFn(value: any): void {\r\n    if (value && typeof value === 'object') {\r\n      excludeKeys.forEach(key => {\r\n        delete value[key];\r\n      });\r\n    }\r\n  }\r\n\r\n  const clonedCollection = _.cloneDeep(collection);\r\n\r\n  return _.cloneDeepWith(clonedCollection, omitFn);\r\n}\r\n\r\nexport function getProgress(loaded: number, total: number): number {\r\n  return Math.round((loaded / total) * 100);\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InitialIndicatorComponent } from './initial-indicator.component';\r\n\r\n@NgModule({\r\n  declarations: [InitialIndicatorComponent],\r\n  imports: [CommonModule],\r\n  exports: [InitialIndicatorComponent]\r\n})\r\nexport class InitialIndicatorModule {}\r\n","export const PAGE_OFFSET_FOR_SERVER = -1;\r\nexport const SEARCH_DEBOUNCE_TIME = 300;\r\n","export const VERITAS_API_PROXY_PREFIX_URL = 'VERITAS_API_PROXY_PREFIX_URL';\r\n"]}